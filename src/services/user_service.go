package services

import (
	"roycetechnology.com/floverde/sample-rest-api/models"
	"github.com/jinzhu/copier"
	"github.com/jinzhu/gorm"
	"time"
)

// Service encapsulates usecase logic for users.
type UserService interface {
    // Find all users
    GetAll() ([]models.User, error)
	// Find a single user by ID
	GetById(id uint) (*models.User, error)
	// Create a new user
	Create(params UserInputDTO) (*models.User, error)
	// Update a pre-existing user
	Update(id uint, params UserInputDTO) (*models.User, error)
	// Delete a pre-existing user
	Delete(id uint) error
}

// DTO used to create/update a user.
type UserInputDTO struct {
    Name         string    `json:"name"`                      					 // user name
	Dob          time.Time `json:"dob" time_format:"2006-01-02" time_utc:"1"`    // date of birth
	Address      string    `json:"address"`                                      // user address
	Description  string    `json:"description"`                                  // user description
}

// Standard implementation of UserService.
type userServiceImpl struct {
	// Reference to the underlying database
    db *gorm.DB
}

// Creates a standard UserService instance
func NewUserService(db *gorm.DB) UserService {
    return &userServiceImpl{db}
}
    
// Find all users
func (s *userServiceImpl) GetAll() ([]models.User, error) {
	// Declares a slice of users
	var users []models.User
	// Retrieves all users from the database
	if err := s.db.Find(&users).Error; err != nil {
		// Returns the error generated during query execution
		return nil, err
	}
	// Returns the array of users
	return users, nil
}

// Find a single user by ID
func (s *userServiceImpl) GetById(id uint) (*models.User, error) {
	// Declares a user object
	var user models.User
	// Retrieves the user with a given ID from the database
	if err := s.db.First(&user, id).Error; err != nil {
		// Return the error generated by the previous operation
		return nil, err
	}
	// Returns the user found
	return &user, nil
}

// Create a new user
func (s *userServiceImpl) Create(params UserInputDTO) (*models.User, error) {
	// Create the user entity from the provided DTO
	var user models.User
	// Copies the input parameters into the user's data structure
	if err := copier.Copy(&user, &params); err != nil {
		// Return the error generated by the previous operation
		return nil, err
	}
	
	// Create the new user within the database
	if err := s.db.Create(&user).Error; err != nil {
		// Return the error generated by the previous operation
		return nil, err
	}

	// Returns the user just created
	return &user, nil
}

// Update a pre-existing user
func (s *userServiceImpl) Update(id uint, params UserInputDTO) (*models.User, error) {
	// Declares a user object
	var user models.User
	// Retrieves the user with a given ID from the database
	if err := s.db.First(&user, id).Error; err != nil {
		// Return the error generated by the previous operation
		return nil, err
	}
	
	// Updates the value of user fields
	if err := s.db.Model(&user).Updates(params).Error; err != nil {
		// Return the error generated by the previous operation
		return nil, err
	}

	// Returns the user just updated
	return &user, nil
}

// Delete a pre-existing user
func (s *userServiceImpl) Delete(id uint) error {
	// Declares a user object
	var user models.User
	// Retrieves the user with a given ID from the database
	if err := s.db.First(&user, id).Error; err != nil {
		// Return the error generated by the previous operation
		return err
	}

	// Delete user from database
	if err := s.db.Delete(&user).Error; err != nil {
		// Return the error generated by the previous operation
		return err
	}

	// Operation successfully completed
	return nil
}
