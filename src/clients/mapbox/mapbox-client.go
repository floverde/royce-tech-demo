package mapbox

import (
	"io/ioutil"
	"net/http"
	"net/url"
	"bytes"
	"fmt"
)

// Defines the URL template for invoking the Mapbox API
const ENDPOINT_FORMAT = "https://api.mapbox.com/geocoding/v5/mapbox.places/%s.json?access_token=%s"

// Defines the interface of the Mapbox client
type MapboxClient interface {
	// Gets the list of places for a certain address
	GetPlaces(searchText string) (resp *http.Response, err error)
}

// Internal implementation of MapboxClient
type mapboxClientImpl struct {
	// Mapbox API access tokens
	accessToken string
}

// Creates a Mapbox client
//
// The client is only created if an access
// token is available, otherwise it returns nil.
func NewMapboxClient(accessToken string) MapboxClient {
    // Check if the access token is empty
    if len(accessToken) > 0 {
		// Returns an instance of MapboxClient that stores the access token
		return &mapboxClientImpl {accessToken : accessToken}
	}
	// Return null reference
	return nil
}

// Gets the list of places for a certain address
func (c *mapboxClientImpl) GetPlaces(searchText string) (resp *http.Response, err error) {
	// Executes an HTTP request to query the Mapbox API (gets the list of places associated with an address)
	if resp, err = http.Get(fmt.Sprintf(ENDPOINT_FORMAT, url.PathEscape(searchText), c.accessToken)); err != nil {
		// Return the error generated by the previous operation
		return nil, err
	}
	// Create a new buffer to write the object that wraps the response received from Mapbox
	buf := bytes.NewBufferString(fmt.Sprintf("{\"address\": \"%s\", \"places\": ", searchText))
	// Copy the body of the response provided by Mapbox
	if _, err = buf.ReadFrom(resp.Body); err != nil {
		// Return the error generated by the previous operation
		return nil, err
	}
	// Adds a final bracket to complete the JSON object
	if _, err = buf.WriteString("}"); err != nil {
		// Return the error generated by the previous operation
		return nil, err
	}
	// Closes the reading stream of the old response body
	resp.Body.Close()
	// Updates the value of the ContentLength header
	resp.ContentLength = int64(buf.Len())
	// Overwrites the HTTP response body
	resp.Body = ioutil.NopCloser(buf)
	// Returns the HTTP response
	return resp, nil
}